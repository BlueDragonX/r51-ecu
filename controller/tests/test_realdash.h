#ifndef __R51_TESTS_REALDASH__
#define __R51_TESTS_REALDASH__

#include "src/bus.h"
#include "src/realdash.h"
#include "stream.h"

class RealDashTest : public RealDash {
    public:
        bool filter(uint32_t) override {
            return true;
        }
};

test(RealDash, Read44) {
    Frame actual;
    Frame expect = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte buffer[] = {
        0x44, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xc7,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));
}

test(RealDash, Read66Short) {
    Frame actual;
    Frame expect = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte buffer[] = {
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));
}

test(RealDash, Read66Long) {
    Frame actual;
    Frame expect = {
        .id = 0x5200,
        .len = 64,
        .data = {
            0xe9, 0x1c, 0xfe, 0x5a, 0xa1, 0x7a, 0x18, 0x4e,
            0xe1, 0x52, 0xff, 0x9a, 0x47, 0xe8, 0x27, 0x11,
            0x4f, 0xf4, 0x46, 0xf1, 0x5f, 0xca, 0xdd, 0x13,
            0x3f, 0x76, 0x27, 0x67, 0x03, 0xa9, 0x55, 0x1c,
            0x9b, 0x8e, 0x83, 0xe9, 0xff, 0x74, 0xde, 0x52,
            0x44, 0xa7, 0x75, 0x64, 0x86, 0x3d, 0xcc, 0x2a,
            0x91, 0x28, 0x28, 0xbe, 0x79, 0xf6, 0xaf, 0x50,
            0xfa, 0x6d, 0x31, 0xea, 0x9d, 0x8b, 0x5b, 0xd2,
        }
    };
    byte buffer[] = {
        0x66, 0x33, 0x22, 0x1f, 0x00, 0x52, 0x00, 0x00,
        0xe9, 0x1c, 0xfe, 0x5a, 0xa1, 0x7a, 0x18, 0x4e,
        0xe1, 0x52, 0xff, 0x9a, 0x47, 0xe8, 0x27, 0x11,
        0x4f, 0xf4, 0x46, 0xf1, 0x5f, 0xca, 0xdd, 0x13,
        0x3f, 0x76, 0x27, 0x67, 0x03, 0xa9, 0x55, 0x1c,
        0x9b, 0x8e, 0x83, 0xe9, 0xff, 0x74, 0xde, 0x52,
        0x44, 0xa7, 0x75, 0x64, 0x86, 0x3d, 0xcc, 0x2a,
        0x91, 0x28, 0x28, 0xbe, 0x79, 0xf6, 0xaf, 0x50,
        0xfa, 0x6d, 0x31, 0xea, 0x9d, 0x8b, 0x5b, 0xd2,
        0x84, 0x98, 0x39, 0x0d,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));
}

test(RealDash, ReadMulti) {
    Frame actual;
    Frame expect1 = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    Frame expect2 = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };

    byte buffer[] = {
        // 0x44 frame
        0x44, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xc7,
        // 0x66 frame
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect1));

    received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect2));
}

test(RealDash, ReadPartial) {
    Frame actual;
    Frame expect = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte buffer1[] = {
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
    };
    byte buffer2[] = {
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
    };

    FakeReadStream stream;

    RealDashTest realdash;
    realdash.begin(&stream);

    stream.set(buffer1, sizeof(buffer1)/sizeof(buffer1[0]));
    bool received = realdash.receive(&actual);
    assertFalse(received);

    stream.set(buffer2, sizeof(buffer2)/sizeof(buffer2[0]));
    received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));
}

test(RealDash, ReadPreGarbage) {
    Frame actual;
    Frame expect = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte buffer[] = {
        0xf4, 0x08, 0x0e, 0xef,
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));
}

test(RealDash, ReadPostGarbage) {
    Frame actual;
    Frame expect = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte buffer[] = {
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
        0xf4, 0x08, 0x0e, 0xef,
    };

    FakeReadStream stream;
    stream.set(buffer, sizeof(buffer)/sizeof(buffer[0]));

    RealDashTest realdash;
    realdash.begin(&stream);

    bool received = realdash.receive(&actual);
    assertTrue(received);
    assertTrue(framesEqual(&actual, &expect));

    received = realdash.receive(&actual);
    assertFalse(received);
}

test(RealDash, Write) {
    Frame frame = {
        .id = 0x5800,
        .len = 8,
        .data = {0xf4, 0x08, 0x0e, 0xef, 0x39, 0x2c, 0x1b, 0x4c}
    };
    byte expect[] = {
        0x66, 0x33, 0x22, 0x11,
        0x00, 0x58, 0x00, 0x00,
        0xf4, 0x08, 0x0e, 0xef,
        0x39, 0x2c, 0x1b, 0x4c,
        0xf2, 0x30, 0x3f, 0x6e,
    };
    byte actual[20];
    size_t size = sizeof(actual)/sizeof(actual[0]);
    memset(actual, 0, size);

    FakeWriteStream stream;
    stream.set(actual, size);

    RealDashTest realdash;
    realdash.begin(&stream);
    realdash.send(&frame);

    assertEqual(memcmp(actual, expect, size), 0);
}

#endif  // __R51_TESTS_REALDASH__
